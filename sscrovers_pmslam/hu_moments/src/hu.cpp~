#include "hu_moments/hu.h"
#include <iostream>
#include <sstream>
#include <fstream>
#include <math.h>




hu::hu(ros::NodeHandle *_n){
	first =true;
	ros::NodeHandle private_node_handle("~");
	private_node_handle.param("rate", rate_, int(10));

	//subscribers
	featureMap_sub_ = _n->subscribe("/saliency/features_Hou_Maps", 1, &hu::featureMapCallback, this);

	//publishers
	db_pub_ = _n->advertise<sscrovers_pmslam_common::featureUpdateArray>("SAL_db", 1);

};

hu::~hu(){};

void hu::featureMapCallback(const sscrovers_pmslam_common::featureMap& msg){
	if(first){

		first = false;
		prev = msg.points;
		for (int i=0; i<msg.imgs.size(); i++){
			cv_bridge::CvImagePtr cv_ptr;
			Mat image_;
			try
			{
			
				cv_ptr = cv_bridge::toCvCopy(msg.imgs[i], enc::MONO8);
			}
			catch (cv_bridge::Exception& e)
			{
				ROS_ERROR("cv_bridge exception: %s", e.what());
			}
			cv_ptr->image.copyTo(image_);

			vector<vector<Point> > contours;

  //Canny( image_, image_, 100, 100*2, 3 );
			//threshold(image_, image_, 0, 255, cv::THRESH_TOZERO|cv::THRESH_OTSU);

			//threshold(image_, image_, 0, 255, cv::THRESH_BINARY|cv::THRESH_OTSU);

/*****************pangu thresholding******/

			cv::Mat first, second, third, final, temp;

			first = image_.clone();
			second = image_.clone();
			third = image_.clone();

			//threshold(first, first, 130, 255, cv::THRESH_TRUNC_INV|cv::THRESH_OTSU);
			threshold(first, first, 130, 255, cv::THRESH_BINARY);

			//threshold(second, second, 50, 255, cv::THRESH_TRUNC|cv::THRESH_OTSU);
			threshold(second, second, 60, 255, cv::THRESH_BINARY_INV);

			Canny( third, third, 100, 100*2, 3 );

			
			int dilation_type = MORPH_ELLIPSE;
			int dilation_size = 3;
			Mat element = getStructuringElement( dilation_type,
                                       Size( 2*dilation_size + 1, 2*dilation_size+1 ),
                                       Point( dilation_size, dilation_size ) );
			dilate( third, third, element );
			erode( third, third, element );
			dilate( third, third, element );
			erode( third, third, element );

			
			cv::max(first,second,temp);
			cv::max(temp,third,final);
/******************************************/

 
			//imshow( "canny", image_ ); 
			//imshow( "final", final ); 
			//waitKey(0);

			cv::findContours(final, contours, CV_RETR_LIST, CV_CHAIN_APPROX_NONE);
	
			 
			double huArray[7];

			Moments mm = moments(contours[0],true);

			HuMoments( mm , huArray);

			moment newMoment = moment(huArray[0], huArray[1], huArray[2], huArray[3], huArray[4], huArray[5], huArray[6]);
//ROS_INFO("(%lf , %lf , %lf , %lf , %lf , %lf , %lf )", huArray[0], huArray[1], huArray[2], huArray[3], huArray[4], huArray[5], huArray[6]);	


		 

			prevM.push_back(newMoment);
		}





	}else{

		now = msg.points;
		step_ = msg.header.stamp.nsec;
		sscrovers_pmslam_common::featureUpdateArray tempArray;
		tempArray.header = msg.header;
		vector <sscrovers_pmslam_common::featureUpdate> tempVec;


		/************calculate latest moments*******/

		for (int i=0; i<msg.imgs.size(); i++){
			cv_bridge::CvImagePtr cv_ptr;
			Mat image_;
			try
			{
			
				cv_ptr = cv_bridge::toCvCopy(msg.imgs[i], enc::MONO8);
			}
			catch (cv_bridge::Exception& e)
			{
				ROS_ERROR("cv_bridge exception: %s", e.what());
			}
			cv_ptr->image.copyTo(image_);

			vector<vector<Point> > contours;

			/*****************pangu thresholding******/

			cv::Mat first, second, third, final, temp;

			first = image_.clone();
			second = image_.clone();
			third = image_.clone();

			//threshold(first, first, 130, 255, cv::THRESH_TRUNC_INV|cv::THRESH_OTSU);
			threshold(first, first, 130, 255, cv::THRESH_BINARY);

			//threshold(second, second, 50, 255, cv::THRESH_TRUNC|cv::THRESH_OTSU);
			threshold(second, second, 60, 255, cv::THRESH_BINARY_INV);

			Canny( third, third, 100, 100*2, 3 );

			
			int dilation_type = MORPH_ELLIPSE;
			int dilation_size = 3;
			Mat element = getStructuringElement( dilation_type,
                                       Size( 2*dilation_size + 1, 2*dilation_size+1 ),
                                       Point( dilation_size, dilation_size ) );
			dilate( third, third, element );
			erode( third, third, element );
			dilate( third, third, element );
			erode( third, third, element );

			
			cv::max(first,second,temp);
			cv::max(temp,third,final);
			/******************************************/

			

			findContours(final, contours, CV_RETR_LIST, CV_CHAIN_APPROX_NONE);

			if (contours.size()<1){
				//if no rock seen in box; pop box
				
			
			} else{
				double huArray[7];
				Moments mm = moments(contours[0],true);

				HuMoments( mm , huArray);
				//ROS_INFO("(%lf , %lf , %lf , %lf , %lf , %lf , %lf )", huArray[0], huArray[1], huArray[2], huArray[3], huArray[4], huArray[5], huArray[6]);	
				moment newMoment = moment(huArray[0], huArray[1], huArray[2], huArray[3], huArray[4], huArray[5], huArray[6]);
				nowM.push_back(newMoment);
			}
		}

		/****** Niave pt pairs ********/
		std::vector<int> ptpairs;
		for (int q=0; q<prev.size();q++){
			float dist = 10000;
			int pair =-1;
			for (int w=0; w<now.size();w++){
				float x1 = prev.at(q).x;
				float y1 = prev.at(q).y;
				float x2 = now.at(w).x;
				float y2 = now.at(w).y;
				float testDist = (x2-x1)*(x2-x1)+(y2-y1)*(y2-y1);
				if(testDist<dist){
					dist=testDist;
					pair=w;
				}
			}
			ptpairs.push_back(pair);
		}
		

	ROS_INFO("dangle, %lu", prevM.size());		 
		/*******Calculate niave average*******/	
		double sum =0;
		std::vector<double> v;
		for(int e=0; e<prevM.size();e++){
			if (  prevM.size() > -1 ) {
				double measure = prevM.at(e).similarity(nowM.at(ptpairs.at(e)));
ROS_INFO("prev (%lf , %lf , %lf , %lf , %lf , %lf , %lf )", prevM.at(e).h0,prevM.at(e).h1,prevM.at(e).h2,prevM.at(e).h3,prevM.at(e).h4,prevM.at(e).h5,prevM.at(e).h6);
ROS_INFO("now (%lf , %lf , %lf , %lf , %lf , %lf , %lf )", nowM.at(ptpairs.at(e)).h0, nowM.at(ptpairs.at(e)).h1, nowM.at(ptpairs.at(e)).h2, nowM.at(ptpairs.at(e)).h3, nowM.at(ptpairs.at(e)).h4, nowM.at(ptpairs.at(e)).h5, nowM.at(ptpairs.at(e)).h6);
ROS_INFO("similar %lf", measure);
				sum += measure;
				v.push_back(measure);
			}	
		}
		double mean = sum/prevM.size();
ROS_INFO("average %lf", mean);

 	double temp = 0;

        for(int u = 0; u < v.size() ; u++)

        {

             temp += (v.at(u) - mean) * (v.at(u) - mean) ;

        }

        ROS_INFO("stddev %f ", temp / v.size());
			
		/*************************/

		for (int i=0; i<nowM.size(); i++){
 
			moment newMoment = nowM.at(i);
			//matcher
			bool testIn = false;
			int intIn = -1;
			std::vector<double> measures;
			std::vector<int> mInts;
			for (int j=0; j<database.size(); j++){
				double measure;
				testIn = database.at(j).inBundle(newMoment,mean,measure);
				if(testIn){
					mInts.push_back( j);
					measures.push_back(measure);
				}
			}
			//if multiple mins, minimise. 
			double measureTest = 1000;
			for(int r=0; r<measures.size();r++){
				if(measures.at(r)<measureTest){
					measureTest = measures.at(r);
					intIn = mInts.at(r);
				}
			}	



			sscrovers_pmslam_common::featureUpdate temp;
			if (testIn){
				database[intIn].add(newMoment);

				//id = intIn & exists = false
				temp.id = intIn;
				temp.exists = false;

				temp.x = msg.points[i].x;
				temp.y = msg.points[i].y;

			}else{
				database.push_back(moment_bundle(newMoment));

				// id = database.size() & exists =true
				temp.id = database.size();
				temp.exists = true;

				temp.x = msg.points[i].x;
				temp.y = msg.points[i].y;
			}
			tempVec.push_back(temp);
		}
	
		tempArray.features = tempVec;
		db_pub_.publish(tempArray);
		prev = now;
		prevM = nowM;
		now.clear();
		nowM.clear();
	}
};


moment::moment(){
};

moment::moment(double ah0,double ah1,double ah2,double ah3,double ah4,double ah5,double ah6){
	h0 = ah0;
	h1 = ah1;
	h2 = ah2;
	h3 = ah3;
	h4 = ah4;
	h5 = ah5;
	h6 = ah6;
};


template <typename T> int sgn(T val) {
    return (T(0) < val) - (val < T(0));
}

double moment::similarity(moment h){

	double ma0 = sgn(h0) *  log(h0);
	double mb0 = sgn(h.h0) *  log(h.h0);
	double m0 = std::abs(ma0  - mb0);

	double ma1 = sgn(h1) *  log(h1);
	double mb1 = sgn(h.h1) *  log(h.h1);
	double m1 = std::abs(ma1  - mb1);

	double ma2 = sgn(h2) *  log(h2);
	double mb2 = sgn(h.h2) *  log(h.h2);
	double m2 = std::abs(ma2  - mb2);

	double m3=0;
	if(h3 ==0 || h.h3==0){
			double ma3 = sgn(h3) *  log(h3);
			double mb3 = sgn(h.h3) *  log(h.h3);
			m3 = std::abs(ma3  - mb3);
	}

	double m4=0;
	if(h4 ==0 || h.h4==0){
			double ma4 = sgn(h4) *  log(h4);
			double mb4 = sgn(h.h4) *  log(h.h4);
			m4 = std::abs(ma4  - mb4);
	}

	double m5=0;
	if(h5 ==0 || h.h5==0){
			double ma5 = sgn(h5) *  log(h5);
			double mb5 = sgn(h.h5) *  log(h.h5);
			m5 = std::abs(ma5  - mb5);
	}

	double m6=0;
	if(h6==0 || h.h6==0){
			double ma6 = sgn(h6) *  log(h6);
			double mb6 = sgn(h.h6) *  log(h.h6);
			m6 = std::abs(ma6  - mb6);
	}


	return m1 +m2 +m3 +m4 +m5 +m6; 
};


bool moment_bundle::inBundle(moment newM, double dist, double &outputValue){
	for (int i=0; i<bundle.size();i++){
		outputValue = bundle.at(i).similarity(newM);
		if ( outputValue < dist){
			return true;
		}
	}
	return false;
};


void moment_bundle::add(moment newM){
	if (bundle.size()<2){
		bundle.push_back(newM);
	}else{
		if (bundle.at(bundle.size() -2).similarity(newM) >0.5 && bundle.at(bundle.size() -1).similarity(newM) <0.5){
			bundle.push_back(newM);
		}		
	}
};

moment_bundle::moment_bundle(moment newM){
	bundle.push_back(newM);
}


int main(int argc, char **argv)
{

  // Set up ROS.
  ros::init(argc, argv, "hu_moments");
  ros::NodeHandle n;

  // Create a new NodeExample object.
  hu *hu_core = new hu(&n); // __atribute__... only for eliminate unused variable warning :)


  ros::Rate r(hu_core->rate_);

  // Main loop.

  while (n.ok())
  {
    ros::spinOnce();
    r.sleep();
  }

  return 0;


}

