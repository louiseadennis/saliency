#ifndef hu_H
#define hu_H

// ROS includes
#include "ros/ros.h"
#include "ros/time.h"
#include "tf/tf.h"

//ROS messages


#include "sscrovers_pmslam_common/featureUpdateArray.h"
#include "sscrovers_pmslam_common/featureUpdate.h"
#include "sscrovers_pmslam_common/control_vec.h"

#include "sscrovers_pmslam_common/featureUpdate3DArray.h"
#include "sscrovers_pmslam_common/featureUpdate3D.h"

#include "sscrovers_pmslam_common/featureMap.h"

#include "image_transport/image_transport.h"
#include <sensor_msgs/image_encodings.h>
#include <cv_bridge/cv_bridge.h>

// OpenCV
#include "cv.h"
#include "opencv2/highgui/highgui.hpp"
#include "geometry_msgs/Point32.h"



#include <math.h>


#define DIST 0.005

using std::string;
using namespace cv;
namespace enc = sensor_msgs::image_encodings;

class moment{
	public:
		moment();
		moment(double ah0,double ah1,double ah2,double ah3,double ah4,double ah5,double ah6);
		double h0,h1,h2,h3,h4,h5,h6;
		double similarity(moment h);

};

class moment_bundle{
	public:
		moment_bundle();
		moment_bundle(moment newM);
		std::vector<moment> bundle;
		void add(moment newM);
		bool inBundle(moment newM, double dist);
};


class hu{
	public:
		hu(ros::NodeHandle *_n);
		~hu();

		//! rate for node main loop
		int rate_;
	private:

		//! features subscriber
		ros::Subscriber featureMap_sub_;
		//! db publisher
		ros::Publisher db_pub_;
		int step_;

		void featureMapCallback(const sscrovers_pmslam_common::featureMap& msg);

		std::vector<moment_bundle> database;

		std::vector <geometry_msgs::Point32> prev, now;

		std::vector <moment> prevM, nowM;

		bool first;
};





#endif 
